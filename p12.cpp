/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

#include <iostream>
#include <cmath>
#include <string>
#include <vector>


// n * (n + 1) / 2 : triangle number
int tri_num(int n)
{
    return n * (n + 1) / 2;
};

// counting divisors of n
int count_div (int n)
{
    std::vector<int> indice = {};
    int count = 1;
    int num = n;
    int product = 1;

    while(num % 2 == 0)
    {
        num /= 2;
        count++;
    }

    indice.push_back(count);

    count = 1;

    for (int i = 3; i * i <= n; i += 2)
    {
        if (num % i != 0) continue;
        
        while (num % i == 0)
        {
            num /= i;
            count++;
        }

        indice.push_back(count);

        count = 1;
    }

    if (num != 1) indice.push_back(2);

    for (auto &e : indice)
    {
        product *= e;
    }

    return product;
    
};

int main()
{
    int i = 1;
    while(true)
    {
        int tri = tri_num(i);
        int num_div = count_div(tri);
        std::cout << num_div << " ";
        if (num_div > 500)
        {
            std::cout << i << "th triangle number: " << tri;
            break;
        }
        i++;
    }

    return 0;
}